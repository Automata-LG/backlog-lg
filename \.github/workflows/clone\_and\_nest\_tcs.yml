name: 🔄 TC 마스터 복제 및 상위 이슈 연결 (이슈 생성 자동화)

on:
  # 1. 트리거 설정: PM이 GitHub Actions 탭에서 수동으로 실행하도록 설정합니다.
  workflow_dispatch:
    inputs:
      parent_issue_id: # 필수 수정: 콜론만 남기고 아래 속성 정의
        description: '복제된 TC들이 연결될 Target Repo의 상위(Parent) 이슈 번호 (예: 212)'
        required: true
        default: '212' # 기본값은 필수 아님
      source_repo: # 필수 수정: 콜론만 남김
        description: '마스터 TC가 있는 Source Repo 전체 경로 (예: Automata-LG/TC-Master_LGE-APP)'
        required: true
        default: 'Automata-LG/TC-Master_LGE-APP' 
      target_project_url: # 필수 수정: 콜론만 남김
        description: '복제된 이슈를 추가할 LG_SM Project Board의 URL'
        required: true
        default: 'https://github.com/orgs/Automata-LG/projects/1/views/1' # 기본값은 필수 아님

jobs:
  clone_and_nest:
    runs-on: ubuntu-latest
    
    # 2. 권한 설정: PAT(PROJECT_ACCESS_TOKEN)를 사용하므로 최소 권한만 명시합니다.
    permissions:
      contents: read 

    steps:
    - name: 코드 체크아웃 (필수 단계)
      uses: actions/checkout@v4
      
    - name: GitHub CLI 및 환경 변수 설정
      env:
        # 3. PAT 인증: Secret에 저장된 PAT를 GH_TOKEN에 할당하여 CLI가 인증하도록 설정합니다.
        GH_TOKEN: ${{ secrets.PROJECT_ACCESS_TOKEN }}
        SOURCE_REPO: ${{ github.event.inputs.source_repo }}
        TARGET_REPO: ${{ github.repository }} # 현재 실행 중인 backlog-lg Repository
        
      run: |
        echo "Source Repo: $SOURCE_REPO"
        echo "Target Repo (복제 대상): $TARGET_REPO"
        
    - name: 이슈 복제, 하위 이슈 연결 및 프로젝트 추가 로직 실행
      env:
        PARENT_ISSUE_ID: ${{ github.event.inputs.parent_issue_id }}
        PROJECT_URL: ${{ github.event.inputs.target_project_url }}
        
      run: |
        echo "--- 4. 마스터 TC 목록 조회 (Source Repo에서) ---"
        # Source Repo에서 'TC-Master' 라벨이 붙은 모든 열린 이슈의 제목과 본문을 JSON으로 추출합니다.
        # base64 인코딩을 통해 본문(Body) 내용의 줄바꿈/특수문자 문제를 방지합니다.
        MASTER_ISSUES=$(gh issue list \
          --repo $SOURCE_REPO \
          --label "TC-Master" \
          --state open \
          --json title,body \
          --jq '.[] | @base64')

        if [ -z "$MASTER_ISSUES" ]; then
          echo "조회된 마스터 TC 이슈가 없습니다. 워크플로우를 종료합니다."
          exit 0
        fi
        
        echo "--- 5. 복제, 하위 이슈 연결 및 프로젝트 추가 시작 ---"
        
        # 각 마스터 이슈 데이터를 반복하며 복제 작업을 수행합니다.
        echo "$MASTER_ISSUES" | while read -r ISSUE_DATA; do
          
          # base64 디코딩 및 jq를 사용하여 제목(TITLE)과 본문(BODY) 데이터를 추출합니다.
          _jq() {
            echo "$ISSUE_DATA" | base64 --decode | jq -r "${1}"
          }
          TITLE=$(_jq '.title')
          BODY=$(_jq '.body')
          
          NEW_TITLE="${TITLE}"
          # 복제된 이슈 본문에 Parent Issue 연결 정보를 명시하여 PM이 바로 확인 가능하도록 함
          NEW_BODY="## [마스터 TC 복제]\n\n**상위(Parent) 이슈:** #${PARENT_ISSUE_ID}\n\n---\n\n${BODY}"
          
          # 6. 라벨 설정: 'QA' (Issue Type), 'App' (도메인) 라벨을 추가합니다.
          NEW_LABELS="QA, App" # <--- 필수 수정: 닫는 따옴표 추가
          
          # 7. 새로운 이슈를 Target Repo(backlog-lg)에 생성 (이슈 복제)
          echo "   -> 복제 중: $NEW_TITLE"
          NEW_ISSUE_NUMBER=$(gh issue create \
            --repo $TARGET_REPO \
            --title "$NEW_TITLE" \
            --body "$NEW_BODY" \
            --label "$NEW_LABELS" \
            --json number --jq .number)
            
          echo "   ✅ 새 이슈 생성 완료: #${NEW_ISSUE_NUMBER}"

          # 8. 새로 생성된 이슈를 Project Board에 추가
          # 이슈를 Project URL이 지정하는 보드에 자동으로 추가하고 'To Do' 컬럼에 배치됩니다.
          gh project item add $NEW_ISSUE_NUMBER \
            --repo $TARGET_REPO \
            --url "$PROJECT_URL"

          # 9. Parent Issue와의 연결 (Relates to): 이슈 간의 관련성을 표시합니다.
          # GitHub CLI를 통해 Parent/Sub-issue Hierarchy를 직접 설정하는 가장 간단한 방법입니다.
          gh issue link $NEW_ISSUE_NUMBER $PARENT_ISSUE_ID \
            --repo $TARGET_REPO \
            --add "relates to" 

          echo "   ✅ Parent #$PARENT_ISSUE_ID 연결 및 Project 추가 완료"
          
        done

        echo "--- 10. 모든 복제 및 연결 작업 완료 ---"
