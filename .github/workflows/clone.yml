name: 🔄 TC 마스터 복제 및 상위 이슈 연결 (이슈 생성 자동화)

on:
  workflow_dispatch:
    inputs:
      parent_issue_id:
        description: '복제된 TC들이 연결될 Target Repo의 상위(Parent) 이슈 번호 (예: 212)'
        required: true
        default: '212'
      source_repo:
        description: '마스터 TC가 있는 Source Repo 전체 경로 (예: Automata-LG/TC-Master_LGE-APP)'
        required: true
        default: 'Automata-LG/TC-Master_LGE-APP'
      target_project_url:
        description: '복제된 이슈를 추가할 LG_SM Project Board의 URL'
        required: true
        default: 'https://github.com/orgs/Automata-LG/projects/1/views/1'

jobs:
  clone_and_nest:
    runs-on: ubuntu-latest

    # ✅ 수정됨: permissions 블록의 들여쓰기 조정
    permissions:
      contents: read
      issues: write
      projects: write
      pull-requests: write
      id-token: write 
      
    steps:
    - name: 코드 체크아웃 (필수 단계)
      uses: actions/checkout@v4
      
    - name: GitHub CLI 인증 및 환경 변수 설정
      uses: cli/cli-action@v1 # GitHub CLI Action 사용
      with:
        token: ${{ secrets.PROJECT_ACCESS_TOKEN }} 

    - name: 환경 변수 정의 및 로직 실행
      # 모든 변수를 run 스텝의 env로 통합하여 관리
      env:
        GH_TOKEN: ${{ secrets.PROJECT_ACCESS_TOKEN }} 
        SOURCE_REPO: ${{ github.event.inputs.source_repo }}
        TARGET_REPO: ${{ github.repository }}
        PARENT_ISSUE_ID: ${{ github.event.inputs.parent_issue_id }}
        PROJECT_URL: ${{ github.event.inputs.target_project_url }}

      run: |
        echo "--- 4. 마스터 TC 목록 조회 (Source Repo에서) ---"
        echo "Source Repo: $SOURCE_REPO"
        
        # MASTER_ISSUES 변수 정의 시 줄 바꿈 없이 한 줄로 처리
        MASTER_ISSUES=$(gh issue list --repo "$SOURCE_REPO" --label "TC-Master" --state open --json title,body --jq '.[] | @base64')

        if [ -z "$MASTER_ISSUES" ]; then
          echo "조회된 마스터 TC 이슈가 없습니다. 워크플로우를 종료합니다."
          exit 0
        fi
        
        echo "--- 5. 복제, 하위 이슈 연결 및 프로젝트 추가 시작 (총 $(echo "$MASTER_ISSUES" | wc -l) 건) ---"
        
        # 이슈 데이터를 한 줄씩 읽어와 처리
        echo "$MASTER_ISSUES" | while read -r ISSUE_DATA; do
          
          # base64 디코딩 및 jq 필터링 함수
          _jq() {
            echo "$ISSUE_DATA" | base64 --decode | jq -r "${1}"
          }
          TITLE=$(_jq '.title')
          BODY=$(_jq '.body')
          
          NEW_TITLE="${TITLE}"
          NEW_BODY="## [마스터 TC 복제]\n\n**상위(Parent) 이슈:** #${PARENT_ISSUE_ID}\n\n---\n\n${BODY}"
          
          # 6. 라벨 설정
          NEW_LABELS="QA, App" 
          
          # 7. 새로운 이슈를 Target Repo(backlog-lg)에 생성 (이슈 복제)
          echo "   -> 복제 중: $NEW_TITLE"
          NEW_ISSUE_NUMBER=$(gh issue create \
            --repo "$TARGET_REPO" \
            --title "$NEW_TITLE" \
            --body "$NEW_BODY" \
            --label "$NEW_LABELS" \
            --json number --jq .number)
            
          echo "   ✅ 새 이슈 생성 완료: #${NEW_ISSUE_NUMBER}"

          # 8. 새로 생성된 이슈를 Project Board에 추가
          gh project item add "$NEW_ISSUE_NUMBER" \
            --repo "$TARGET_REPO" \
            --url "$PROJECT_URL"

          # 9. Parent Issue와의 연결 (Relates to)
          gh issue link "$NEW_ISSUE_NUMBER" "$PARENT_ISSUE_ID" \
            --repo "$TARGET_REPO" \
            --add "relates to" 

          echo "   ✅ Parent #$PARENT_ISSUE_ID 연결 및 Project 추가 완료"
          
        done

        echo "--- 10. 모든 복제 및 연결 작업 완료 ---"
