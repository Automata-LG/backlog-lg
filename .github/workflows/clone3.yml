name: Clone Issues from Source Repository

on:
  workflow_dispatch:
    inputs:
      parent_issue_id:
        description: 'Target Repo의 상위(Parent) 이슈 번호'
        required: true
        default: '212'
        type: string
      source_label:
        description: '복제할 이슈의 레이블 (이 레이블을 가진 이슈만 복제)'
        required: true
        default: '메인'
        type: string
      source_repo:
        description: 'Source Repository (복제할 이슈가 있는 레포지토리)'
        required: true
        default: 'Automata-LG/TC-Master_LGE-APP'
        type: string
      target_project_url:
        description: 'LG_SM Project Board URL'
        required: true
        default: 'https://github.com/orgs/Automata-LG/projects/1/views/1'
        type: string

jobs:
  clone-issues:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract Project Node ID
        id: extract_project_id
        env:
          GH_TOKEN: ${{ secrets.PROJECT_ACCESS_TOKEN }}
        run: |
          # Project URL에서 프로젝트 번호 추출
          PROJECT_URL="${{ inputs.target_project_url }}"
          PROJECT_NUMBER=$(echo $PROJECT_URL | grep -oP 'projects/\K\d+')
          ORG_NAME=$(echo $PROJECT_URL | grep -oP 'orgs/\K[^/]+')
          
          echo "Project Number: $PROJECT_NUMBER"
          echo "Organization: $ORG_NAME"
          
          # Project Node ID 조회
          PROJECT_ID=$(gh api graphql -f query='
            query($org: String!, $number: Int!) {
              organization(login: $org) {
                projectV2(number: $number) {
                  id
                }
              }
            }' -f org="$ORG_NAME" -F number="$PROJECT_NUMBER" --jq '.data.organization.projectV2.id')
          
          echo "project_id=$PROJECT_ID" >> $GITHUB_OUTPUT
          echo "✅ Project ID: $PROJECT_ID"

      - name: Clone Issues and Link to Parent
        env:
          GH_TOKEN: ${{ secrets.PROJECT_ACCESS_TOKEN }}
          PROJECT_ID: ${{ steps.extract_project_id.outputs.project_id }}
        run: |
          SOURCE_REPO="${{ inputs.source_repo }}"
          PARENT_ISSUE_ID="${{ inputs.parent_issue_id }}"
          TARGET_REPO="${{ github.repository }}"
          SOURCE_LABEL="${{ inputs.source_label }}"
          
          echo "📋 Source Repository: $SOURCE_REPO"
          echo "🎯 Target Repository: $TARGET_REPO"
          echo "🔗 Parent Issue ID: $PARENT_ISSUE_ID"
          echo "🏷️  Source Label: $SOURCE_LABEL"
          echo "📊 Project ID: $PROJECT_ID"
          echo ""
          
          # Source Repository에서 특정 레이블을 가진 open 상태의 이슈 조회
          echo "🔍 Fetching open issues with label '$SOURCE_LABEL' from source repository..."
          ISSUES=$(gh issue list --repo "$SOURCE_REPO" --state open --label "$SOURCE_LABEL" --json number,title,body --limit 1000)
          
          ISSUE_COUNT=$(echo "$ISSUES" | jq '. | length')
          echo "📊 Found $ISSUE_COUNT open issues with label '$SOURCE_LABEL'"
          echo ""
          
          if [ "$ISSUE_COUNT" -eq 0 ]; then
            echo "⚠️ No open issues found with label '$SOURCE_LABEL' in source repository"
            exit 0
          fi
          
          # 각 이슈를 반복 처리
          echo "$ISSUES" | jq -c '.[]' | while read -r issue; do
            ISSUE_NUMBER=$(echo "$issue" | jq -r '.number')
            ISSUE_TITLE=$(echo "$issue" | jq -r '.title')
            ISSUE_BODY=$(echo "$issue" | jq -r '.body // ""')
            
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "📌 Processing Issue #$ISSUE_NUMBER: $ISSUE_TITLE"
            echo ""
            
            # 플랫폼별로 2개의 이슈 생성 (IOS, AOS)
            for PLATFORM in "IOS" "AOS"; do
              echo "  🔄 Creating $PLATFORM version..."
              
              # 플랫폼별 제목 생성
              PLATFORM_TITLE="$PLATFORM $ISSUE_TITLE"
              
              # 새 이슈 본문 생성 (상위 이슈 정보 포함)
              NEW_BODY=$(cat << EOF
**Original Issue:** $SOURCE_REPO#$ISSUE_NUMBER
**Parent Issue:** #$PARENT_ISSUE_ID
**Platform:** $PLATFORM

---

$ISSUE_BODY
EOF
)
              
              # Target Repository에 새 이슈 생성
              echo "    ➡️ Creating new issue in target repository..."
              NEW_ISSUE_URL=$(gh issue create \
                --repo "$TARGET_REPO" \
                --title "$PLATFORM_TITLE" \
                --body "$NEW_BODY" \
                --label "QA,App")
              
              NEW_ISSUE_NUMBER=$(echo "$NEW_ISSUE_URL" | grep -oP '\d+$')
              echo "    ✅ Created Issue #$NEW_ISSUE_NUMBER ($PLATFORM): $NEW_ISSUE_URL"
              
              # 새 이슈의 Node ID 가져오기
              echo "    🔍 Getting Node ID for new issue..."
              NEW_ISSUE_ID=$(gh api graphql -f query='
                query($owner: String!, $repo: String!, $number: Int!) {
                  repository(owner: $owner, name: $repo) {
                    issue(number: $number) {
                      id
                    }
                  }
                }' -f owner="$(echo $TARGET_REPO | cut -d'/' -f1)" \
                   -f repo="$(echo $TARGET_REPO | cut -d'/' -f2)" \
                   -F number="$NEW_ISSUE_NUMBER" \
                   --jq '.data.repository.issue.id')
              
              echo "    📝 Issue Node ID: $NEW_ISSUE_ID"
              
              # Project Board에 이슈 추가
              echo "    📊 Adding issue to project board..."
              gh api graphql -f query='
                mutation($project: ID!, $item: ID!) {
                  addProjectV2ItemById(input: {projectId: $project, contentId: $item}) {
                    item {
                      id
                    }
                  }
                }' -f project="$PROJECT_ID" -f item="$NEW_ISSUE_ID"
              
              echo "    ✅ Added to project board"
              
              # 상위 이슈와 sub-issue 관계 설정
              echo "    🔗 Setting up parent-child relationship..."
              
              # Parent Issue의 Node ID 가져오기
              PARENT_NODE_ID=$(gh issue view "$PARENT_ISSUE_ID" \
                --repo "$TARGET_REPO" \
                --json id \
                --jq '.id')
              
              echo "    📝 Parent Issue Node ID: $PARENT_NODE_ID"
              echo "    📝 New Issue Node ID: $NEW_ISSUE_ID"
              
              # GraphQL mutation으로 sub-issue 추가
              gh api graphql \
                -H "GraphQL-Features: sub_issues" \
                -f query="
                  mutation addSubIssue {
                    addSubIssue(input: {
                      issueId: \"$PARENT_NODE_ID\",
                      subIssueId: \"$NEW_ISSUE_ID\"
                    }) {
                      issue {
                        title
                        number
                      }
                      subIssue {
                        title
                        number
                      }
                    }
                  }" && {
                echo "    ✅ Successfully added as sub-issue to #$PARENT_ISSUE_ID"
              } || {
                echo "    ⚠️ Failed to create parent-child relationship via API"
                echo "    💡 Adding comment as fallback..."
                gh issue comment "$NEW_ISSUE_NUMBER" \
                  --repo "$TARGET_REPO" \
                  --body "🔗 Related to parent issue: #$PARENT_ISSUE_ID"
                gh issue comment "$PARENT_ISSUE_ID" \
                  --repo "$TARGET_REPO" \
                  --body "✅ Cloned from $SOURCE_REPO#$ISSUE_NUMBER → #$NEW_ISSUE_NUMBER ($PLATFORM)"
              }
              
              echo "    ✅ Parent-child relationship established"
              echo ""
              
              # API Rate Limit 방지를 위한 짧은 대기
              sleep 2
            done
            
            echo "  ✅ Completed both IOS and AOS versions for issue #$ISSUE_NUMBER"
            echo ""
          done
          
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🎉 All issues cloned successfully!"