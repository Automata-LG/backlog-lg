name: 🔄 TC 마스터 복제 및 상위 이슈 연결 (이슈 생성 자동화)

on:
  workflow_dispatch:
    inputs:
      parent_issue_id:
        description: '복제된 TC들이 연결될 Target Repo의 상위(Parent) 이슈 번호 (예: 212)'
        required: true
        default: '212'
      source_repo:
        description: '마스터 TC가 있는 Source Repo 전체 경로 (예: Automata-LG/TC-Master_LGE-APP)'
        required: true
        default: 'Automata-LG/TC-Master_LGE-APP'
      target_project_url:
        description: '복제된 이슈를 추가할 LG_SM Project Board의 URL'
        required: true
        default: 'https://github.com/orgs/Automata-LG/projects/1/views/1'

jobs:
  clone_and_nest:
    runs-on: ubuntu-latest

    # ✅ 권한 설정 (GH CLI 작업에 필수)
    permissions:
      contents: read
      issues: write
      projects: write # <--- 이 부분이 jobs 레벨이 아닌 permissions 하위 레벨에 맞게 들여쓰기 되어야 합니다.
      pull-requests: write
      id-token: write 
      
    steps:
    - name: 코드 체크아웃 (필수 단계)
      uses: actions/checkout@v4
      
    # ✅ 1. GitHub CLI 인증 (가장 확실한 토큰 주입 방식)
    - name: GitHub CLI 인증 및 환경 변수 설정
      uses: cli/cli-action@v1
      with:
        # PROJECT_ACCESS_TOKEN Secret을 GH_TOKEN 환경 변수로 설정
        token: ${{ secrets.PROJECT_ACCESS_TOKEN }} 

    # ✅ 2. Project URL에서 Node ID 추출 (Project Board 추가 안정성 확보)
    - name: 환경 변수 정의 및 Project ID 추출
      id: setup
      env:
        GH_TOKEN: ${{ secrets.PROJECT_ACCESS_TOKEN }} 
        PROJECT_URL: ${{ github.event.inputs.target_project_url }}
      run: |
        echo "--- 3. Project Node ID 추출 시작 ---"
        # Project URL에서 Node ID를 추출합니다.
        PROJECT_NODE_ID=$(gh project get --url "$PROJECT_URL" --json id --jq .id)
        
        if [ -z "$PROJECT_NODE_ID" ]; then
          echo "🚨 프로젝트 URL '$PROJECT_URL' 에서 Project Node ID를 찾을 수 없습니다. URL을 확인해주세요."
          exit 1
        fi
        
        echo "✅ Project Node ID 추출 완료: $PROJECT_NODE_ID"
        # 다음 스텝에서 사용할 수 있도록 Node ID를 환경 변수에 저장합니다.
        echo "PROJECT_NODE_ID=$PROJECT_NODE_ID" >> $GITHUB_ENV

    # ✅ 3. 핵심 로직 실행 (이슈 조회, 생성, 연결, Project 추가)
    - name: 이슈 복제, 하위 이슈 연결 및 프로젝트 추가 로직 실행
      env:
        GH_TOKEN: ${{ secrets.PROJECT_ACCESS_TOKEN }} 
        SOURCE_REPO: ${{ github.event.inputs.source_repo }}
        TARGET_REPO: ${{ github.repository }}
        PARENT_ISSUE_ID: ${{ github.event.inputs.parent_issue_id }}
        PROJECT_NODE_ID: ${{ env.PROJECT_NODE_ID }} # 추출된 Node ID 사용

      run: |
        echo "--- 4. 마스터 TC 목록 조회 (Source Repo에서) ---"
        echo "Source Repo: $SOURCE_REPO"
        
        # MASTER_ISSUES 변수 정의 및 이슈 목록 조회
        MASTER_ISSUES=$(gh issue list --repo "$SOURCE_REPO" --label "TC-Master" --state open --json title,body --jq '.[] | @base64')

        if [ -z "$MASTER_ISSUES" ]; then
          echo "조회된 마스터 TC 이슈가 없습니다. 워크플로우를 종료합니다."
          exit 0
        fi
        
        ISSUE_COUNT=$(echo "$MASTER_ISSUES" | wc -l)
        echo "--- 5. 복제, 하위 이슈 연결 및 프로젝트 추가 시작 (총 $ISSUE_COUNT 건) ---"
        
        # 이슈 데이터를 한 줄씩 읽어와 처리
        echo "$MASTER_ISSUES" | while read -r ISSUE_DATA; do
          
          # base64 디코딩 및 jq 필터링 함수
          _jq() {
            echo "$ISSUE_DATA" | base64 --decode | jq -r "${1}"
          }
          TITLE=$(_jq '.title')
          BODY=$(_jq '.body')
          
          NEW_TITLE="${TITLE}"
          NEW_BODY="## [마스터 TC 복제]\n\n**상위(Parent) 이슈:** #${PARENT_ISSUE_ID}\n\n---\n\n${BODY}"
          NEW_LABELS="QA, App" 
          
          # 7. 새로운 이슈를 Target Repo에 생성 (이슈 복제)
          echo "   -> 복제 중: $NEW_TITLE"
          NEW_ISSUE_NUMBER=$(gh issue create \
            --repo "$TARGET_REPO" \
            --title "$NEW_TITLE" \
            --body "$NEW_BODY" \
            --label "$NEW_LABELS" \
            --json number --jq .number)
            
          echo "   ✅ 새 이슈 생성 완료: #${NEW_ISSUE_NUMBER}"

          # 8. 새로 생성된 이슈를 Project Board에 추가
          # Node ID 방식을 사용해 안정성 확보
          gh project item add "$NEW_ISSUE_NUMBER" \
            --repo "$TARGET_REPO" \
            --project-id "$PROJECT_NODE_ID" 

          # 9. Parent Issue와의 연결 (Relates to)
          gh issue link "$NEW_ISSUE_NUMBER" "$PARENT_ISSUE_ID" \
            --repo "$TARGET_REPO" \
            --add "relates to" 

          echo "   ✅ Parent #$PARENT_ISSUE_ID 연결 및 Project 추가 완료"
          
        done

        echo "--- 10. 모든 복제 및 연결 작업 완료 ---"
